<%-- 1. Java Naming and Directory Interface(JNDI)는
	    Java 애플리케이션이 네트워크에서 name을 이용하여 객체를 찾고 가져올 수 있도록 하는 표준 API
	    
	    * JNDI를 사용하면 Java 프로그램이나 SP 페이지에서 응용 프로그램 내부 또는 외부에서 지정된 
	    자원을 참조 할 수 있습니다.
	    
	    * 데이터 베이스 커넥션 풀에서 사용하게 될 DataSource 객체는 네이밍 서비스를 통해 컨테이너에게 제공
	    
	    * 애플리케이션은 JNDI를 사용하여 서버의 resource 를 찾습니다.
	    이때 JNDI의 기본이름 중 java:comp/env/jdbc는 JDBC Datasource의 이름
	    만약 context.xml에서 resource의 name이 "jdbc/OrcaleDB"인 경우
	    lookup()메소드의 "jave:comp/env/jdbc/OracleDB" 값을 인자로 넘긴다.
	    
	 2. DVCP(Datavase Connection pool)
	 	데이터베이스와 연결된 커넥션을 미리 만들어서 pool 속에 저장해 두고 있다ㅣ가 필욯라 때
	 	커넥션을 pool에서 다시 쓰고 다시 pool에 반환하는 기법
	 	웹 프로그래밍에서는 데이터베이스이 환경설정과 연결 관리 등을 따로 XML파일이나 속성 파일을
	 	사용해서 관리하ㅣ고, 이렇게 설정된 정보는 이름을 사여ㅛㅇ하여 획득하는 방법을 사용
	 	
	 	* DBCP를 이용한 커넥션 풀을 사용하기 위해  먼저 톰캣에 DataSource를 등록
	 	context.xml에서 등록할 수 있으며 위치는 META-INF에 저장  
	 	* DBCP 라이브러리: tomcat-dbcp.jar 파일--%>
	3. DataSource 이용 방법
	(1) lookup()메소드를 통해 DataSource 객체를 얻어온다.
	DataSource ds = (DataSource) init.lookup("java:comp/env/jdbc/OracleDB");
	(2) DataSource 객체의 getConnection() 메소드를 통해 Connection pool에서
	Connection 획득
	(3) Connection 객체를 통한 DBMS 작업을 수행
	(4) 모든 작업이 끝나면 DataSource 객체를 통해서 Connection Pool에 Connection을 반납
	